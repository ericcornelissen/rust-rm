name: Publish
on:
  push:
    tags:
      - v[0-9]+.[0-9]+

permissions: read-all

env:
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build (${{ matrix.os-name }}, ${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-26
            os-name: MacOS
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04
            os-name: Ubuntu
          - target: x86_64-apple-darwin
            os: macos-26
            os-name: MacOS
          - target: x86_64-pc-windows-msvc
            os: windows-2025
            os-name: Windows
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
            os-name: Ubuntu
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Install Rust toolchain
        env:
          TARGET: ${{ matrix.target }}
        run: |
          rustup show
          rustup target add "$TARGET"
      - name: Install cross
        uses: taiki-e/install-action@aa2649f25ee7099207734772f5393fd30167cb73 # v2.58.0
        with:
          tool: cross@0.2.5
      - name: Build binary
        env:
          TARGET: ${{ matrix.target }}
        run: cross build --release --target "$TARGET"
      - name: Create archive
        id: archive
        shell: bash
        env:
          OS_NAME: ${{ matrix.os-name }}
          TARGET: ${{ matrix.target }}
        run: |
          NAME='rust-rm'
          ARTIFACT_NAME="$NAME-$TARGET"

          mkdir "$ARTIFACT_NAME"
          if [ "$OS_NAME" = 'Windows' ]; then
            mv "./target/$TARGET/release/$NAME.exe" "./$NAME.exe"
          else
            mv "./target/$TARGET/release/$NAME" "./$NAME"
          fi

          if [ "$OS_NAME" = 'Windows' ]; then
            7z a "$ARTIFACT_NAME.zip" "./$NAME.exe"
            echo "artifact=$ARTIFACT_NAME.zip" >>"$GITHUB_OUTPUT"
          else
            tar -czf "$ARTIFACT_NAME.tar.gz" "./$NAME"
            echo "artifact=$ARTIFACT_NAME.tar.gz" >>"$GITHUB_OUTPUT"
          fi
      - name: Upload archive
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          path: ${{ steps.archive.outputs.artifact }}
          retention-days: 1
  github-release:
    name: GitHub Release
    runs-on: ubuntu-24.04
    permissions:
      contents: write # To create a GitHub Release
    needs:
      - build
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Fetch tags
        run: git fetch --tags --force
      - name: Get release version
        id: version
        shell: bash
        run: |
          echo "version=${GITHUB_REF#refs/tags/}" >>"$GITHUB_OUTPUT"
      - name: Get release notes
        id: notes
        shell: bash
        run: |
          {
            echo 'notes<<EOF'
            git for-each-ref "$GITHUB_REF" --format '%(contents)'
            echo 'EOF'
          } >>"$GITHUB_OUTPUT"
      - name: Download artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        id: download
        with:
          path: ${{ runner.temp }}/artifacts
      - name: Create GitHub release
        uses: ncipollo/release-action@b7eabc95ff50cbeeedec83973935c8f306dfcd0b # v1.20.0
        with:
          tag: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.notes.outputs.notes }}
          artifacts: ${{ steps.download.outputs.download-path }}/artifact/*
          draft: false
          prerelease: false
